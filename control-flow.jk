-- New ideas for a better syntax based on conversation with Zef
-- function with one argument, ! means to execute
print! "Hello World"

-- if accepts two expressions and returns nil if false, and lazy executes the second as the return value if true
b := false
if ~a < 5 b = true 
-- Though this particular case would be better written as
b = a < 5
-- the conditional operator can be used when you need an else case
a < 5 ? true : false

-- Parens can be used to put several statements into a single expression, the last one is the value.
b = (1;2;3;4) --> b == 4

-- Newlines and semicolons are interchangable, both are expression terminators
b = (
  "ignore me"
  "this is the real value"
)

-- Implementation of while
while := {|cond fn| -- Takes two parameters, the conditon block and the iteration block
  {
    if ~cond! return
    fn
    self!
  }!
}

-- Count from 1 to 100 using while
i := 1 -- declare a new local variable i and set to 1
while! { i <= 100 } {
  print! i
  i = i + 1
}

-- Implementation of times
-- loops i from 1 to n calling (fn i) for each
times := {|n fn|
  i := 1
  {
    if i > n return
    fn! i
    i = i + 1
    self!
  }!
}

times! 10 print -- Print from 1 to 10


