-- New ideas for a better syntax based on conversation with Zef
-- function with one argument, ! means to execute
print! "Hello World"

-- when executes the function if the value is truthy (also passes the truthy value to the function)
b := false
when a < 5 { b = true }
-- Though this particular case would be better written using the conditional
b = a < 5 ? true : false
-- Or even shorter, the result of the < operator is already a boolean
b = a < 5

-- Parens can be used to put several statements into a single expression, the last one is the value.
b = (1;2;3;4) --> b == 4

-- Newlines and semicolons are interchangable, both are expression terminators
b = (
  "ignore me"
  "this is the real value"
)

-- There are two kinds of loops: "from..to..by" and "while"
-- Both accept a function they call for each iteration of the loop
-- The while loop passes in the truthy value in case it's useful

-- Print from 1 to 100 using from..to
from 1 to 100 print

-- Print from 100 to 1 using from..to..by
from 100 to 1 by -1 print

-- Print from 1 to 100 using while
i := 1 -- declare a new local variable i and set to 1
while i <= 100 {
  print! i
  i = i + 1
}

-- Loop over items in a list
magicNumbers := <[1 7 3 5 4 2 3 4 5]>
from 0 to magicNumbers.length! - 1 {|i|
  print! magicNumbers[i]
}
-- Implementation of times not using for..to..by or while
-- loops i from 1 to n calling (fn i) for each
times := {|n fn|
  i := 1
  {
    return if i > n
    fn! i
    i = i + 1
    self!
  }!
}

times! 10 print -- Print from 1 to 10


