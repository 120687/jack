{
  "lex": {
    "rules": [
      ["$",                               "return 'EOF'"],
      ["--.*",                            "/* ignore comments */"],
      ["\\s+",                            "/* skip whitespace */"],
      ["<[0-9A-Fa-f][0-9A-Fa-f](\\s+[0-9A-Fa-f][0-9A-Fa-f])*>", "return 'BUFFER'"],
      ["(null|true|false)\\b",            "return 'CONSTANT'"],
      ["return\\b",                       "return 'RETURN'"],
      ["abort\\b",                        "return 'ABORT'"],
      ["var\\b",                          "return 'VAR'"],
      ["for\\b",                          "return 'FOR'"],
      ["map\\b",                          "return 'MAP'"],
      ["in\\b",                           "return 'IN'"],
      ["if\\b",                           "return 'IF'"],
      ["elif\\b",                         "return 'ELIF'"],
      ["else\\b",                         "return 'ELSE'"],
      ["while\\b",                        "return 'WHILE'"],
      ["\\$[a-zA-Z_][a-zA-Z0-9_]*",       "return 'NATIVE_CODE'"],
      ["[a-zA-Z_][a-zA-Z0-9_]*:",         "return 'KEY';"],
      [":\"(?:[^\"\\\\]|\\\\.)*\"",       "return 'SSYMBOL'"],
      [":+[a-zA-Z_][a-zA-Z0-9_]*",        "return 'SYMBOL'"],
      ["@[a-zA-Z_][a-zA-Z0-9_]*",         "return 'FORM'"],
      ["\"(?:[^\"\\\\]|\\\\.)*\":",       "return 'SKEY'"],
      ["'(?:[^'\\\\]|\\\\.)*':",          "return 'SKEY'"],
      ["\"(?:[^\"\\\\]|\\\\.)*\"",        "return 'STRING'"],
      ["'(?:[^'\\\\]|\\\\.)*'",           "return 'STRING'"],
      ["(?:0|-?[1-9][0-9]*)?:(?:0|-?[1-9][0-9]*)?", "return 'RANGE'"],
      ["\\.(?:0|-?[1-9][0-9]*)",          "return 'IGET'"],
      ["\\.[a-zA-Z_][a-zA-Z0-9_]*",       "return 'GET'"],
      ["[a-zA-Z_][a-zA-Z0-9_]*",          "return 'IDENT'"],
      ["(?:0|-?[1-9][0-9]*)",             "return 'INTEGER'"],
      ["<<",                              "return '<<'"],
      [">>",                              "return '>>'"],
      ["(?:\\*|\\/|\\^|%)",               "return 'BINOP1'"],
      ["(?:\\+|-)",                       "return 'BINOP2'"],
      ["(?:<=|<|>=|>)",                   "return 'BINOP3'"],
      ["(?:~=|==)",                       "return 'BINOP4'"],
      ["(?:&&)",                          "return 'BINOP5'"],
      ["(?:\\|\\||\\^\\^)",               "return 'BINOP6'"],
      ["~",                               "return '~'"],
      ["=",                               "return '='"],
      ["\\[",                             "return '['"],
      ["\\]",                             "return ']'"],
      ["\\{",                             "return '{'"],
      ["\\|",                             "return '|'"],
      ["\\}",                             "return '}'"],
      ["\\(",                             "return '('"],
      ["\\)",                             "return ')'"]
    ]
  },

  "operators": [
    ["right", "="],
    ["left", "BINOP6"],
    ["left", "BINOP5"],
    ["left", "BINOP4"],
    ["left", "BINOP3"],
    ["left", "BINOP2"],
    ["left", "BINOP1"],
    ["right", "~"],
    ["left", "IGET", "GET", "("]
  ],

  "bnf": {
    "root": [
      ["code EOF", "return $1"]
    ],
    "code": [
      ["", "$$ = []"],
      ["code expr", "$$ = $1.concat([$2])"],
      ["code statement", "$$ = $1.concat([$2])"]
    ],
    "params": [
      ["IDENT", "$$ = [$1]"],
      ["params IDENT", "$$ = $1.concat([$2])"]
    ],
    "elifs": [
      ["", "$$ = []"],
      ["elifs ELIF expr { code }", "$$ = $1.concat([$3, $5])"]
    ],
    "key": [
      ["KEY", "$$ = $1.substr(0, $1.length - 1)"],
      ["SKEY", "$$ = eval($1.substr(0, $1.length - 1))"]
    ],
    "pairs": [
      ["", "$$ = []"],
      ["pairs key expr", "$$ = $1.concat([$2, $3])"]
    ],
    "expr": [
      ["STRING", "$$ = eval($1);"],
      ["IDENT", "$$ = yy.Symbol($1)"],
      ["INTEGER", "$$ = parseInt($1, 10);"],
      ["CONSTANT", "$$ = $1 === 'true' ? true : $1 === 'false' ? false : null;"],
      ["BUFFER", "$$ = yy.Buffer($1.substr(1, $1.length - 2).split(/\\s+/).map(function (b) { return parseInt(b, 16);}))"],
      ["RANGE", "$$ = yy.Range($1);"],
      ["FORM", "$$ = yy.forms[$1.substr(1)];"],
      ["SSYMBOL", "$$ = yy.Symbol(':' + eval($1.substr(1)));"],
      ["SYMBOL", "$$ = yy.Symbol($1);"],
      ["NATIVE_CODE", "$$ = yy.NativeCode($1.substr(1));"],
      ["expr BINOP1 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["expr BINOP2 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["expr BINOP3 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["expr BINOP4 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["expr BINOP5 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["expr BINOP6 expr", "$$ = [yy.forms.call, $1, $2, $3]"],
      ["~ expr", "$$ = [yy.forms.call, $1, $1]"],
      ["expr IGET", "$$ = [yy.forms.call, $1, parseInt($2.substr(1), 10)]"],
      ["expr GET", "$$ = [yy.forms.call, $1, $2.substr(1)]"],

      ["<< expr >>", "$$ = [yy.forms.buf, $2]"],
      ["{ params | code }", "$$ = [yy.forms.def, $2, $4]"],
      ["{ | code }", "$$ = [yy.forms.def, []].concat($3)"],
      ["[ code ]", "$$ = [yy.forms.array].concat($2)"],
      ["{ pairs }", "$$ = [yy.forms.object].concat($2)"],
      ["expr ( code )", "$$ = [yy.forms.call, $1].concat($3)"],

      ["VAR IDENT = expr", "$$ = [yy.forms.var, $2, $4]"],
      ["IDENT = expr", "$$ = [yy.forms.assign, $1, $3]"],
      ["MAP IDENT IN expr IF expr { code }", "$$ = [yy.forms.map, $2, $4, $6, $8]"],
      ["MAP IDENT IN expr { code }", "$$ = [yy.forms.map, $2, $4, true, $6]"],
      ["FOR IDENT IN expr IF expr { code }", "$$ = [yy.forms.for, $2, $4, $6, $8]"],
      ["FOR IDENT IN expr { code }", "$$ = [yy.forms.for, $2, $4, true, $6]"],
      ["IF expr { code } elifs", "$$ = [yy.forms.if, $2, $4].concat($6)"],
      ["IF expr { code } elifs ELSE { code }", "$$ = [yy.forms.if, $2, $4].concat($6).concat([$8])"],
      ["WHILE expr { code }", "$$ = [yy.forms.while, $2, $4]"]
    ],
    "statement": [
      ["RETURN expr", "$$ = [yy.forms.return, $2]"],
      ["ABORT expr", "$$ = [yy.forms.abort, $2]"]
    ]
  }
}
