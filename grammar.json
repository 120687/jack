{
  "lex": {
    "rules": [
      ["$",                               "return 'EOF'"],
      ["--.*",                            "/* ignore comments */"],
      ["<[0-9A-Fa-f][0-9A-Fa-f](\\s+[0-9A-Fa-f][0-9A-Fa-f])*>", "return 'BUFFER'"],
      ["(null|true|false)\\b",            "return 'CONSTANT'"],
      ["return\\b",                       "return 'RETURN'"],
      ["abort\\b",                        "return 'ABORT'"],
      ["var\\b",                          "return 'VAR'"],
      ["class\\b",                        "return 'CLASS'"],
      ["on\\b",                           "return 'ON'"],
      ["def\\b",                          "return 'DEF'"],
      ["for\\b",                          "return 'FOR'"],
      ["map\\b",                          "return 'MAP'"],
      ["in\\b",                           "return 'IN'"],
      ["if\\b",                           "return 'IF'"],
      ["elif\\b",                         "return 'ELIF'"],
      ["else\\b",                         "return 'ELSE'"],
      ["while\\b",                        "return 'WHILE'"],
      ["\"(?:[^\"\\\\]|\\\\.)*\"",        "return 'STRING'"],
      ["'(?:[^'\\\\]|\\\\.)*'",           "return 'STRING'"],
      ["[a-zA-Z$_][a-zA-Z0-9$_]*[?!]?",   "return 'IDENT'"],
      ["(?:0|-?[1-9][0-9]*)",             "return 'INTEGER'"],
      [":",                               "return ':'"],
      ["(?:\\*|\\/|\\^|%)",               "return 'BINOP1'"],
      ["(?:\\+|-)",                       "return 'BINOP2'"],
      ["(?:<=|<|>=|>)",                   "return 'BINOP3'"],
      ["(?:!=|==)",                       "return 'BINOP4'"],
      ["(?:&&)",                          "return 'BINOP5'"],
      ["(?:\\|\\||\\^\\^)",               "return 'BINOP6'"],
      [",\\s*",                           "return ','"],
      ["\\s*\\.",                         "return '.'"],
      ["!",                               "return '!'"],
      ["=",                               "return '='"],
      ["\\[\\s*",                         "return '['"],
      ["\\s*\\]",                         "return ']'"],
      ["\\{\\s*",                         "return '{'"],
      ["\\|\\s*",                         "return '|'"],
      ["\\s*\\}",                         "return '}'"],
      ["\\(\\s*",                         "return '('"],
      ["\\s*\\)",                         "return ')'"],
      ["\\s*(?:\\r\\n|\\r|\\n|;)\\s*",    "return 'TERM'"],
      ["\\s+",                            "/* skip whitespace */"]
    ]
  },

  "operators": [
    ["left", ","],
    ["right", "="],
    ["left", "BINOP6"],
    ["left", "BINOP5"],
    ["left", "BINOP4"],
    ["left", "BINOP3"],
    ["left", "BINOP2"],
    ["left", "BINOP1"],
    ["right", "!"],
    ["left", ".", "[", "("]
  ],

  "bnf": {
    "root": [
      ["code EOF", "return $1"]
    ],
    "term0": ["", "term1"],
    "term1": ["TERM", "term1 TERM"],
    "code1": [
      ["expr", "$$ = [$1]"],
      ["statement", "$$ = [$1]"],
      ["code1 term1 expr", "$$ = $1.concat([$3])"],
      ["code1 term1 statement", "$$ = $1.concat([$3])"]
    ],
    "code": [
      ["term0", "$$ = []"],
      ["term0 code1 term0", "$$ = $2"]
    ],
    "list1": [
      ["expr", "$$ = [$1]"],
      ["list1 , expr", "$$ = $1.concat([$3])"]
    ],
    "list": [
      ["", "$$ = []"],
      ["list1", "$$ = $1"],
      ["list1 ,", "$$ = $1"]
    ],
    "params": [
      ["IDENT", "$$ = [$1]"],
      ["params , IDENT", "$$ = $1.concat([$3])"]
    ],
    "key": [
      ["IDENT :", "$$ = $1"],
      ["STRING :", "$$ = eval($1)"],
      ["[ expr ] :", "$$ = $2"]
    ],
    "pairs1": [
      ["key expr", "$$ = [$1, $2]"],
      ["pairs1 , key expr", "$$ = $1.concat([$3, $4])"]
    ],
    "pairs": [
      ["", "$$ = []"],
      ["pairs1", "$$ = $1"],
      ["pairs1 ,", "$$ = $1"]
    ],
    "elifs": [
      ["expr block", "$$ = [$1, $2]"],
      ["elifs ELIF expr block", "$$ = $1.concat([$3, $4])"]
    ],
    "func": [
      ["{ params | code }", "$$ = [$2, $4]"],
      ["{ | code }", "$$ = [[], $3]"]
    ],
    "block": [
      ["{ code }", "$$ = $2"]
    ],
    "expr": [
      ["STRING", "$$ = eval($1);"],
      ["IDENT", "$$ = ['lookup', $1]"],
      ["INTEGER", "$$ = parseInt($1, 10)"],
      ["CONSTANT", "$$ = $1 === 'true' ? true : $1 === 'false' ? false : null;"],
      ["BUFFER", "$$ = ['buffer', $1.substr(1, $1.length - 2).split(/\\s+/).map(function (b) { return parseInt(b, 16);})]"],
      ["expr BINOP1 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["expr BINOP2 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["expr BINOP3 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["expr BINOP4 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["expr BINOP5 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["expr BINOP6 expr", "$$ = ['send', $1, $2, [$3]]"],
      ["! expr", "$$ = ['send', $2, $1, []]"],
      ["IDENT = expr", "$$ = ['assign', $1, $3]"],
      ["expr [ list ] = expr", "$$ = ['send', $1, 'set', [$5].concat($3)]"],
      ["expr [ list ]", "$$ = ['send', $1, 'get', $3]"],
      ["func", "$$ = ['fn'].concat($1)"],

      ["[ list ]", "$$ = ['list', $2]"],
      ["{ pairs }", "$$ = ['map', $2]"],
      ["expr . IDENT ( list )", "$$ = ['send', $1, $3, $5]"],
      ["expr ( list )", "$$ = ['send', $1, 'call', $3]"],
      ["( expr )", "$$ = $2"],

      ["VAR IDENT = expr", "$$ = ['var', $2, $4]"],
      ["DEF IDENT func", "$$ = ['def', $2, $3]"],
      ["ON IDENT func", "$$ = ['on', $2, $3]"],
      ["CLASS IDENT func", "$$ = ['class', $2, $3]"],
      ["MAP IDENT IN expr IF expr block", "$$ = ['mapin', $2, $4, $6, $7]"],
      ["MAP IDENT IN expr block", "$$ = ['mapin', $2, $4, true, $5]"],
      ["FOR IDENT IN expr IF expr block", "$$ = ['forin', $2, $4, $6, $7]"],
      ["FOR IDENT IN expr block", "$$ = ['forin', $2, $4, true, $5]"],
      ["IF elifs", "$$ = ['if'].concat($2)"],
      ["IF elifs ELSE block", "$$ = ['if'].concat($2).concat([$4])"],
      ["WHILE expr block", "$$ = ['while', $2, $3]"]
    ],
    "statement": [
      ["RETURN expr", "$$ = ['return', $2]"],
      ["ABORT expr", "$$ = ['abort', $2]"]
    ]
  }
}
