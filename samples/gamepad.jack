vars Joystick, parse

-- Parse an event
parse = {chunk, offset|
  vars event, type, value
  -- The value is a signed 16-bit integer at offset + 4
  value = chunk[offset + 4] + chunk[offset + 5] * 256
  if value >= 0x8000 { value = value - 0x10000 }
  event = {
    value: value
    number: chunk[offset + 7]
  }
  type = chunk[offset + 6]
  if type >= 0x80 {
    type = type - 0x80
    event.init = true
  }
  event.type = if type == 0x01 { "BUTTON" }
  elif type == 0x02 { "AXIS" }
  event
}

-- Object factory for Joysticks
Joystick = {path, callback|
  vars input, read
  -- Create an async read-stream from the linux input device
  input = read-stream(path)

  -- Start an async loop to read the data
  -- TODO: Add fibers and suspending so this callback
  read = {|
    input({chunk|
      if chunk {
        for i in range(#chunk / 8) {
          callback(parse(chunk, i * 8))
        }
        -- Queue another read if there was something
        read()
      }
      else {
        callback({type: "END"})
      }
    })
  }
  read()
}

vars sprites, Player, Bot

sprites = []

Player = {path, name|
  vars mx, my, x, y
  x = rand(0x1000)
  y = rand(0x400)
  Joystick(path, {event|

    if event.type == "AXIS" {
      if event.number == 1 {
        my = event.value
      }
      elif event.number == 0 {
        mx = event.value
      }
    }
    elif event.type == "END" {
      name = "\033[0mX"
    }
--    print(name, inspect(event))
  })
  sprites[#sprites] = {
    tick: {delta|
      x = x + mx * delta / 0x4000
      y = y + my * delta / 0x4000
      if x < 0 { x = 0 }
      if y < 0 { y = 0 }
      write("\033[" + (y / 100) + ";" + (x / 100) + "H" + name)
    }
  }
}

Bot = {name|
  vars x, y
  x = rand(0x1000)
  y = rand(0x400)
  sprites[#sprites] = {
    tick: {delta|
      x = x + (rand(0x1000) - 0x800) * delta / 0x400
      y = y + (rand(0x1000) - 0x800) * delta / 0x800
      if x < 0 { x = 0 }
      if y < 0 { y = 0 }
      write("\033[" + (y / 100) + ";" + (x / 100) + "H" + name)
    }
  }
}

Player("/dev/input/js0", "\033[32;1m◉")
Player("/dev/input/js1", "\033[31;1m◉")
Player("/dev/input/js2", "\033[34;1m◉")
Bot("\033[33;1m★")
Bot("\033[35;1m★")
Bot("\033[36;1m★")

interval(33, {delta|
  write("\033[2J")
  for player in sprites {
    player.tick(delta)
  }
  write("\033[30m")
})
