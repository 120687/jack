vars square, cube

-- Simple pure function
square = (x){ x * x }
-- Another function that uses the "square" value from the closure
-- When a function is defined, the current scope is captured
cube = (x){ x * square(x) }
-- When called, a new scope is created that inherits from the captured scope
-- This new scope contains any paremeters and local variables.
cube(3) 

--------------------------------------------------------------------------------
vars Rectangle, rect

-- Rectangle constructor
Rectangle = (width, height){
  vars area, perimeter
  area = (){ width * height }
  perimeter = (){ 2 * (width + height) }
  -- Export the current scope
  -- Scope objects cannot have keys added or deleted.
  export
}

-- Showing how to use constructor and resulting object
rect = Rectangle(3, 4)
rect.area()      --> 12
rect.perimeter   --> (){...}
rect.perimeter() --> 14
rect.width = 5
rect.area()      --> 20

--------------------------------------------------------------------------------
vars Map, box

Map = () {
  vars keys, values, has, index
  keys = []
  values = []
  has = (key) {
    index = keys.indexOf(key)
    index >= 0
  }
  {
    @has: has,
    @keys: () {
      keys
    }
    @get: (key) {
      if has(key) {
        return values[index]
      }
    },
    @set: (value, key) {
      if has(key) {
        return values[index] = value
      }
      keys.push(key)
      values.push(value)
    },
    @delete: (key) {
      if has(key) {
        keys.remove(index)
        values.remove(index)
      }
    }
  }
}

box = Map()
box["Hello World"] = "string"
box[true] = "boolean"
true in box --> true
box[true]   --> "boolean"
delete box[true]
true in box --> false
box[true]   --> null

--------------------------------------------------------------------------------
vars Matrix, mat
Matrix = (w, h, fill) {
  vars data, i, index, has
  data = []
  i = 0
  while i < w * h {
    data.push(fill)
  }
  has = ((x, y)) {
    if x >= 0 && y >= 0 && x < w && y < h {
      index = y * w + x
      true
    }
    else {
      false
    }
  }
  {
    @has: has,
    @get: function (key) {
      if has(key) {
        return data[index]
      }
    },
    @set: function (key, value) {
      if has(key) {
        return data[index] = value
      }
    },
    @keys: function () {
      [(x,y) for x in range(w) for y in range(h)]
    }
  }
}

identity = Matrix(5, 5, 0)
for i in range(5) {
  identity[(i,i)] = 1
}


--------------------------------------------------------------------------------
vars names, dwarves

names = ["Thorin", "Dwalin", "Balin", "Bifur", "Bofur", "Bombur", "Oin",
         "Gloin", "Ori", "Nori", "Dori", "Fili", "Kili", "Bilbo", "Gandalf"]
dwarves = for name in names {
  if name != "Bilbo" && name != "Gandalf" {
    yield name
  }
}
dwarves.length --> 13

--------------------------------------------------------------------------------
-- count from 1 to 10
for i in range(10) {
  print(i + 1)
}
-- count from 10 to 1
for i in range(10) {
  print(10 - i)
}

--------------------------------------------------------------------------------

match val {

  {name} -> {
    
  }
  {} -> {

  }
}
